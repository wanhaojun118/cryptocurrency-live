{"version":3,"sources":["images/icons/BTC.png","images/icons/ETH.png","images/icons/DASH.png","components/price.jsx","components/currencies.jsx","components/coin.jsx","components/coins.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Price","className","this","props","price","Component","Currencies","state","selectCurrency","Dropdown","onSelect","evtKey","onChangeCurrency","Toggle","variant","id","coin","Menu","style","minWidth","currencies","map","currency","index","Item","key","eventKey","Coin","fetchPrice","apiEndPoint","source","fetch","then","res","json","data","setState","parseFloat","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","currencyChange","clearInterval","apiRequest","newApiEndPoint","url","tickerPath","apiKey","coinId","interval","setInterval","selectCoinIcon","bitcoin_logo","ethereum_logo","dash_logo","src","alt","Coins","selectBackgroundColor","coins","Container","Row","Card","background","App","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7763b963.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/BTC.4cfd3f8b.png\";","module.exports = __webpack_public_path__ + \"static/media/ETH.6594b16f.png\";","module.exports = __webpack_public_path__ + \"static/media/DASH.5d57f92b.png\";","import React, { Component } from \"react\";\r\nimport \"../styles/price.css\";\r\n\r\nclass Price extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h5 className=\"crypto-price\">{this.props.price}</h5>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Price;\r\n","import React, { Component } from \"react\";\r\nimport { Dropdown } from \"react-bootstrap\";\r\n\r\nclass Currencies extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      selectCurrency: this.props.selectCurrency\r\n    };\r\n  }\r\n  render() {\r\n    return (\r\n      <Dropdown onSelect={evtKey => this.props.onChangeCurrency(evtKey)}>\r\n        <Dropdown.Toggle\r\n          variant=\"secondary\"\r\n          id={\"dropdown-basic-\" + this.props.coin}\r\n        >\r\n          <span>{this.props.selectCurrency}</span>\r\n        </Dropdown.Toggle>\r\n        <Dropdown.Menu style={{ minWidth: \"fit-content\" }}>\r\n          {this.props.currencies.map((currency, index) => (\r\n            <Dropdown.Item\r\n              key={\"currency-\" + index}\r\n              id={\"currency-\" + index}\r\n              eventKey={currency}\r\n            >\r\n              {currency}\r\n            </Dropdown.Item>\r\n          ))}\r\n        </Dropdown.Menu>\r\n      </Dropdown>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Currencies;\r\n","import React, { Component } from \"react\";\r\nimport Price from \"./price\";\r\nimport Currencies from \"./currencies\";\r\nimport bitcoin_logo from \"../images/icons/BTC.png\";\r\nimport ethereum_logo from \"../images/icons/ETH.png\";\r\nimport dash_logo from \"../images/icons/DASH.png\";\r\nimport \"../styles/coin.css\";\r\n\r\nclass Coin extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      price: 0.0,\r\n      apiEndPoint: {\r\n        url: \"https://api.nomics.com/v1/\",\r\n        tickerPath: \"currencies/ticker?\",\r\n        apiKey: \"key=d8c58ad78c3ac68338f91185065bfb46&\",\r\n        coinId: \"ids=\" + this.props.coin + \"&\",\r\n        interval: \"interval=1h&\",\r\n        currency: \"convert=USD\"\r\n      },\r\n      selectCurrency: this.props.currencies[0]\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const {\r\n      url,\r\n      tickerPath,\r\n      apiKey,\r\n      coinId,\r\n      interval,\r\n      currency\r\n    } = this.state.apiEndPoint;\r\n    const apiEndPoint =\r\n      url + tickerPath + apiKey + coinId + interval + currency;\r\n\r\n    this.fetchPrice(apiEndPoint, \"ComponentDidMount once.\");\r\n\r\n    this.apiRequest = setInterval(() => {\r\n      this.fetchPrice(apiEndPoint, \"ComponentDidMount interval.\");\r\n    }, 60000);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.apiRequest);\r\n  }\r\n\r\n  fetchPrice = (apiEndPoint, source) => {\r\n    // console.log(`Called from ${source}.`);\r\n    fetch(apiEndPoint)\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        let { price } = data[0];\r\n        this.setState({\r\n          price: parseFloat(price).toLocaleString(undefined, {\r\n            minimumFractionDigits: 2,\r\n            maximumFractionDigits: 2\r\n          })\r\n        });\r\n      });\r\n  };\r\n\r\n  currencyChange = evtKey => {\r\n    clearInterval(this.apiRequest);\r\n    const {\r\n      url,\r\n      tickerPath,\r\n      apiKey,\r\n      coinId,\r\n      interval\r\n    } = this.state.apiEndPoint;\r\n    const currency = \"convert=\" + evtKey;\r\n    const newApiEndPoint =\r\n      url + tickerPath + apiKey + coinId + interval + currency;\r\n\r\n    this.fetchPrice(newApiEndPoint, \"Currency update once.\");\r\n\r\n    this.apiRequest = setInterval(() => {\r\n      this.fetchPrice(newApiEndPoint, \"Currency update interval.\");\r\n    }, 60000);\r\n\r\n    this.setState({\r\n      selectCurrency: evtKey\r\n    });\r\n  };\r\n\r\n  selectCoinIcon = coin => {\r\n    if (coin === \"BTC\") return bitcoin_logo;\r\n    else if (coin === \"ETH\") return ethereum_logo;\r\n    else return dash_logo;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div>\r\n          <h2>1 x {this.props.coin}</h2>\r\n          <img\r\n            src={this.selectCoinIcon(this.props.coin)}\r\n            alt={`${this.props.coin}'s icon`}\r\n            className=\"coin-icon\"\r\n          />\r\n        </div>\r\n        <Price price={this.state.price}></Price>\r\n        <Currencies\r\n          selectCurrency={this.state.selectCurrency}\r\n          currencies={this.props.currencies}\r\n          coin={this.props.coin}\r\n          onChangeCurrency={evtKey => this.currencyChange(evtKey)}\r\n        ></Currencies>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Coin;\r\n","import React, { Component } from \"react\";\r\nimport Coin from \"./coin\";\r\nimport { Container, Row, Card } from \"react-bootstrap\";\r\nimport \"../styles/coins.css\";\r\n\r\nclass Coins extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      coins: [\"BTC\", \"ETH\", \"DASH\"],\r\n      currencies: [\"USD\", \"SGD\", \"MYR\", \"HKD\"]\r\n    };\r\n  }\r\n\r\n  selectBackgroundColor = coin => {\r\n    if (coin === \"BTC\") return \"rgba(255, 153, 0, 0.3)\";\r\n    else if (coin === \"ETH\") return \"rgba(60, 60, 61, 0.3)\";\r\n    else return \"rgba(51, 152, 204, 0.3)\";\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <Row>\r\n          {this.state.coins.map((coin, index) => (\r\n            <Card\r\n              key={index}\r\n              style={{ background: this.selectBackgroundColor(coin) }}\r\n            >\r\n              <Coin coin={coin} currencies={this.state.currencies} />\r\n            </Card>\r\n          ))}\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Coins;\r\n","import React, { Component } from \"react\";\nimport Coins from \"./components/coins\";\n\nclass App extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <Coins></Coins>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}